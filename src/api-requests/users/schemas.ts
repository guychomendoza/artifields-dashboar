import {z} from "zod";

export const GetUserLocationSchema = z.object({
    ip: z.string(),
    network: z.string(),
    version: z.enum(["IPv6", "IPv4"]),
    city: z.string(),
    region: z.string(),
    region_code: z.string(),
    country: z.string(),
    country_name: z.string(),
    country_code: z.string(),
    country_code_iso3: z.string(),
    country_capital: z.string(),
    country_tld: z.string(),
    continent_code: z.string(),
    in_eu: z.boolean(),
    postal: z.string(),
    latitude: z.number(),
    longitude: z.number(),
    timezone: z.string(),
    utc_offset: z.string(),
    country_calling_code: z.string(),
    currency: z.string(),
    currency_name: z.string(),
    languages: z.string(),
    country_area: z.number(),
    country_population: z.number(),
    asn: z.string(),
    org: z.string(),
}).transform((data) => ({
    ip: data.ip,
    network: data.network,
    version: data.version,
    city: data.city,
    region: data.region,
    regionCode: data.region_code,
    country: data.country,
    countryName: data.country_name,
    countryCode: data.country_code,
    countryCodeIso3: data.country_code_iso3,
    countryCapital: data.country_capital,
    countryTld: data.country_tld,
    continentCode: data.continent_code,
    inEu: data.in_eu,
    postal: data.postal,
    latitude: data.latitude,
    longitude: data.longitude,
    timezone: data.timezone,
    utcOffset: data.utc_offset,
    countryCallingCode: data.country_calling_code,
    currency: data.currency,
    currencyName: data.currency_name,
    languages: data.languages,
    countryArea: data.country_area,
    countryPopulation: data.country_population,
    asn: data.asn,
    org: data.org,
}))

const LocationWeatherSchema = z.object({
    name: z.string(),
    region: z.string(),
    country: z.string(),
    lat: z.number(),
    lon: z.number(),
    tz_id: z.string(),
    localtime_epoch: z.number(),
    localtime: z.string(),
});

const CurrentWeatherSchema = z.object({
    last_updated_epoch: z.number(),
    last_updated: z.string(),
    temp_c: z.number(),
    temp_f: z.number(),
    is_day: z.number(),
    condition: z.object({
        text: z.string(),
        icon: z.string(),
        code: z.number(),
    }),
    wind_mph: z.number(),
    wind_kph: z.number(),
    wind_degree: z.number(),
    wind_dir: z.string(),
    pressure_mb: z.number(),
    pressure_in: z.number(),
    precip_mm: z.number(),
    precip_in: z.number(),
    humidity: z.number(),
    cloud: z.number(),
    feelslike_c: z.number(),
    feelslike_f: z.number(),
    windchill_c: z.number(),
    windchill_f: z.number(),
    heatindex_c: z.number(),
    heatindex_f: z.number(),
    dewpoint_c: z.number(),
    dewpoint_f: z.number(),
    vis_km: z.number(),
    vis_miles: z.number(),
    uv: z.number(),
    gust_mph: z.number(),
    gust_kph: z.number(),
});

const ForecastSchema = z.object({
    forecastday: z.array(
        z.object({
            astro: z.object({
                is_moon_up: z.number(),
                is_sun_up: z.number(),
                moon_illumination: z.number(),
                moon_phase: z.string(),
                moonrise: z.string(),
                moonset: z.string(),
                sunrise: z.string(),
                sunset: z.string(),
            }),
            date: z.string(),
            date_epoch: z.number(),
            day: z.object({
                avghumidity: z.number(),
                avgtemp_c: z.number(),
                avgtemp_f: z.number(),
                avgvis_km: z.number(),
                avgvis_miles: z.number(),
                condition: z.object({
                    code: z.number(),
                    icon: z.string(),
                    text: z.string(),
                }),
                daily_chance_of_rain: z.number(),
                daily_chance_of_snow: z.number(),
                daily_will_it_rain: z.number(),
                daily_will_it_snow: z.number(),
                maxtemp_c: z.number(),
                maxtemp_f: z.number(),
                maxwind_kph: z.number(),
                maxwind_mph: z.number(),
                mintemp_c: z.number(),
                mintemp_f: z.number(),
                totalprecip_in: z.number(),
                totalprecip_mm: z.number(),
                totalsnow_cm: z.number(),
                uv: z.number(),
            }),
            hour: z.array(
                z.object({
                    chance_of_rain: z.number(),
                    chance_of_snow: z.number(),
                    cloud: z.number(),
                    condition: z.object({
                        code: z.number(),
                        icon: z.string(),
                        text: z.string(),
                    }),
                    dewpoint_c: z.number(),
                    dewpoint_f: z.number(),
                    feelslike_c: z.number(),
                    feelslike_f: z.number(),
                    gust_kph: z.number(),
                    gust_mph: z.number(),
                    heatindex_c: z.number(),
                    heatindex_f: z.number(),
                    humidity: z.number(),
                    is_day: z.number(),
                    precip_in: z.number(),
                    precip_mm: z.number(),
                    pressure_in: z.number(),
                    pressure_mb: z.number(),
                    snow_cm: z.number(),
                    temp_c: z.number(),
                    temp_f: z.number(),
                    time: z.string(),
                    time_epoch: z.number(),
                    uv: z.number(),
                    vis_km: z.number(),
                    vis_miles: z.number(),
                    will_it_rain: z.number(),
                    will_it_snow: z.number(),
                    wind_degree: z.number(),
                    wind_dir: z.string(),
                    wind_kph: z.number(),
                    wind_mph: z.number(),
                    windchill_c: z.number(),
                    windchill_f: z.number(),
                })
            ),
        })
    ),
});

export const GetUserLocationWeatherForecastSchema = z
    .object({
        location: LocationWeatherSchema,
        current: CurrentWeatherSchema,
        forecast: ForecastSchema,
    })
    .transform((data) => ({
        location: {
            name: data.location.name,
            region: data.location.region,
            country: data.location.country,
            latitude: data.location.lat,
            longitude: data.location.lon,
            timezoneId: data.location.tz_id,
            localtimeEpoch: data.location.localtime_epoch,
            localtime: data.location.localtime,
        },
        currentWeather: {
            lastUpdatedEpoch: data.current.last_updated_epoch,
            lastUpdated: data.current.last_updated,
            tempC: data.current.temp_c,
            tempF: data.current.temp_f,
            isDay: data.current.is_day,
            condition: {
                text: data.current.condition.text,
                icon: data.current.condition.icon,
                code: data.current.condition.code,
            },
            windMph: data.current.wind_mph,
            windKph: data.current.wind_kph,
            windDegree: data.current.wind_degree,
            windDir: data.current.wind_dir,
            pressureMb: data.current.pressure_mb,
            pressureIn: data.current.pressure_in,
            precipMm: data.current.precip_mm,
            precipIn: data.current.precip_in,
            humidity: data.current.humidity,
            cloud: data.current.cloud,
            feelslikeC: data.current.feelslike_c,
            feelslikeF: data.current.feelslike_f,
            windchillC: data.current.windchill_c,
            windchillF: data.current.windchill_f,
            heatindexC: data.current.heatindex_c,
            heatindexF: data.current.heatindex_f,
            dewpointC: data.current.dewpoint_c,
            dewpointF: data.current.dewpoint_f,
            visKm: data.current.vis_km,
            visMiles: data.current.vis_miles,
            uv: data.current.uv,
            gustMph: data.current.gust_mph,
            gustKph: data.current.gust_kph,
        },
        forecast: data.forecast.forecastday.map((day) => ({
            astro: {
                sunrise: day.astro.sunrise,
                sunset: day.astro.sunset,
                moonrise: day.astro.moonrise,
                moonset: day.astro.moonset,
                moonPhase: day.astro.moon_phase,
                moonIllumination: day.astro.moon_illumination,
                isMoonUp: day.astro.is_moon_up,
                isSunUp: day.astro.is_sun_up,
            },
            date: day.date,
            dateEpoch: day.date_epoch,
            day: {
                avgTempC: day.day.avgtemp_c,
                avgTempF: day.day.avgtemp_f,
                maxTempC: day.day.maxtemp_c,
                maxTempF: day.day.maxtemp_f,
                minTempC: day.day.mintemp_c,
                minTempF: day.day.mintemp_f,
                avgHumidity: day.day.avghumidity,
                avgVisibilityKm: day.day.avgvis_km,
                avgVisibilityMiles: day.day.avgvis_miles,
                maxWindKph: day.day.maxwind_kph,
                maxWindMph: day.day.maxwind_mph,
                totalPrecipMm: day.day.totalprecip_mm,
                totalPrecipIn: day.day.totalprecip_in,
                totalSnowCm: day.day.totalsnow_cm,
                uvIndex: day.day.uv,
                dailyChanceOfRain: day.day.daily_chance_of_rain,
                dailyChanceOfSnow: day.day.daily_chance_of_snow,
                dailyWillItRain: day.day.daily_will_it_rain,
                dailyWillItSnow: day.day.daily_will_it_snow,
                condition: {
                    text: day.day.condition.text,
                    icon: day.day.condition.icon,
                    code: day.day.condition.code,
                },
                hour: day.hour.map((hour) => ({
                    time: hour.time,
                    timeEpoch: hour.time_epoch,
                    temperatureC: hour.temp_c,
                    temperatureF: hour.temp_f,
                    feelsLikeC: hour.feelslike_c,
                    feelsLikeF: hour.feelslike_f,
                    dewPointC: hour.dewpoint_c,
                    dewPointF: hour.dewpoint_f,
                    windSpeedKph: hour.wind_kph,
                    windSpeedMph: hour.wind_mph,
                    windDegree: hour.wind_degree,
                    windDirection: hour.wind_dir,
                    gustSpeedKph: hour.gust_kph,
                    gustSpeedMph: hour.gust_mph,
                    pressureMb: hour.pressure_mb,
                    pressureIn: hour.pressure_in,
                    humidity: hour.humidity,
                    visibilityKm: hour.vis_km,
                    visibilityMiles: hour.vis_miles,
                    cloud: hour.cloud,
                    uvIndex: hour.uv,
                    chanceOfRain: hour.chance_of_rain,
                    chanceOfSnow: hour.chance_of_snow,
                    willItRain: hour.will_it_rain,
                    willItSnow: hour.will_it_snow,
                    precipitationMm: hour.precip_mm,
                    precipitationIn: hour.precip_in,
                    snowCm: hour.snow_cm,
                    heatIndexC: hour.heatindex_c,
                    heatIndexF: hour.heatindex_f,
                    windChillC: hour.windchill_c,
                    windChillF: hour.windchill_f,
                    condition: {
                        text: hour.condition.text,
                        icon: hour.condition.icon,
                        code: hour.condition.code,
                    },
                }))
            }
        })),
    }));