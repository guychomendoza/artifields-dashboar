import{j as c,t as n}from"./index-DNJ-7_Rf.js";import{G as w}from"./Grid-BaR81AYS.js";import{S as h,z as i}from"./index-DnZn71We.js";import{G as g,a as m,b as l}from"./format-time-Ca3E0HHB.js";const p=()=>c.jsx(w,{container:!0,spacing:2,children:[...Array(9)].map((s,r)=>c.jsx(w,{item:!0,xs:12,md:4,children:c.jsx(h,{variant:"rectangular",height:r<6?300:100,sx:{borderRadius:2}})},r))}),y=async()=>{try{const s=await fetch(`${n}/api/weather-datas/latest-all`);if(!s.ok)throw new Error("Network response was not ok");const r=await s.json();return g.parse(r)}catch(s){throw s instanceof i.ZodError?(console.error("Validation error:",s.errors),new Error(s.message)):new Error(s)}},j=async s=>{try{const r=await fetch(`${n}/api/weather-data/${s}`);if(!r.ok)throw new Error("Network response was not ok");const o=await r.json();return m.parse(o)}catch(r){throw r instanceof i.ZodError?(console.error("Validation error:",r.errors),new Error(r.message)):new Error(r)}},$=async(s,r)=>{try{const o=r.map(async a=>{const e=await fetch(`${n}/api/user-stations/assign`,{method:"POST",body:JSON.stringify({user_id:a,devEui:s}),headers:{"Content-Type":"application/json"}});if(!e.ok)throw new Error(`Failed to assign ranch to user ${a}`);const t=await e.json();if(t.message!=="Estación asignada al usuario con éxito")throw new Error(`Error assigning ranch to user ${a}: ${t.message}`);return t});await Promise.all(o)}catch(o){throw o instanceof i.ZodError?(console.error("Validation error:",o.errors),new Error(o.message)):o}},S=async s=>{if(!s)throw new Error("No ranch id found.");try{const r=await fetch(`${n}/api/user-stations/stations/${s}/users`);if(!r.ok)throw new Error("Network response was not ok");const o=await r.json();if(o.message!=="Usuarios asignados y no asignados a la estación")throw new Error("No se pudieron recuperar los usuarios");return l.parse(o)}catch(r){throw new Error(`Failed to move sensor to Ranch: ${r}`)}},k=async(s,r)=>{try{const o=r.map(async a=>{const e=await fetch(`${n}/api/user-stations/stations/${s}/users/${a}`,{method:"DELETE"});if(!e.ok)throw new Error(`Failed to assign ranch to user ${a}`);const t=await e.json();if(t.message!=="Desasignación realizada con éxito")throw new Error(`Error assigning ranch to user ${a}: ${t.message}`);return t});await Promise.all(o)}catch(o){throw o instanceof i.ZodError?(console.error("Validation error:",o.errors),new Error(o.message)):o}};export{p as D,$ as a,y as b,j as c,S as g,k as u};
